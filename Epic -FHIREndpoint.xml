<channel version="3.4.0">
  <id>efe360e4-74b6-43aa-bee9-67bf2da6fe32</id>
  <nextMetaDataId>8</nextMetaDataId>
  <name>Epic - FHIR Endpoint</name>
  <description>Epic open endpoint sandbox for DSTU2 resources
</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1463441683879</time>
    <timezone>America/Los_Angeles</timezone>
  </lastModified>
  <revision>1</revision>
  <sourceConnector version="3.4.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.4.0">
      <pluginProperties/>
      <sourceConnectorProperties version="3.4.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>false</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.4.0">
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>Set URL</name>
          <script>var raw = connectorMessage.getRawData().toString();
msg = JSON.parse(&quot;{}&quot;);

if (raw.contains(&apos;http&apos;)) {
	// Request for DocumentReference attachments
	channelMap.put(&quot;URL&quot;, raw);
	destinationSet.removeAllExcept(&apos;EPIC CDA&apos;);

} else {
	// Request for Patient or DocumentReference resources
	channelMap.put(&quot;urlPatient&quot;, $(&apos;openEpic&apos;) + &apos;/Patient/&apos; + raw);
	channelMap.put(&quot;urlDocumentReference&quot;, $(&apos;openEpic&apos;) + &apos;/DocumentReference?patient=&apos; + raw)&#xd;
	destinationSet.remove(&apos;EPIC CDA&apos;);
}</script>
          <type>JavaScript</type>
          <data>
            <entry>
              <string>Script</string>
              <string>var raw = connectorMessage.getRawData().toString();
msg = JSON.parse(&quot;{}&quot;);

if (raw.contains(&apos;http&apos;)) {
	// Request for DocumentReference attachments
	channelMap.put(&quot;URL&quot;, raw);
	destinationSet.removeAllExcept(&apos;EPIC CDA&apos;);

} else {
	// Request for Patient or DocumentReference resources
	channelMap.put(&quot;urlPatient&quot;, $(&apos;openEpic&apos;) + &apos;/Patient/&apos; + raw);
	channelMap.put(&quot;urlDocumentReference&quot;, $(&apos;openEpic&apos;) + &apos;/DocumentReference?patient=&apos; + raw)&#xd;
	destinationSet.remove(&apos;EPIC CDA&apos;);
}</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.4.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.4.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.0">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.0">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.0">
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.0">
      <metaDataId>7</metaDataId>
      <name>EPIC Patient</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>5000</retryIntervalMillis>
          <regenerateTemplate>true</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>true</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>${urlPatient}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Accept</string>
            <list>
              <string>application/json+fhir</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>true</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>true</responseIncludeMetadata>
        <responseBinaryMimeTypes>application.*(?&lt;!json|xml)</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>text/plain</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.0">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.0">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Check HTTP status code</name>
            <script>try {

	var resp =  $(&apos;responseStatusLine&apos;);

	if (isHttpCode2xx(resp)) {	
		processHTTP2xxCodes(resp);
		responseStatus = SENT;

	} else {	
		processHTTPErrorCodes(resp);
		responseStatus = ERROR;	
	}
	
} catch(ex) {
	logger.info(&quot;Exception: &quot; + ex);
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>try {

	var resp =  $(&apos;responseStatusLine&apos;);

	if (isHttpCode2xx(resp)) {	
		processHTTP2xxCodes(resp);
		responseStatus = SENT;

	} else {	
		processHTTPErrorCodes(resp);
		responseStatus = ERROR;	
	}
	
} catch(ex) {
	logger.info(&quot;Exception: &quot; + ex);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>HTTP 2xx Codes</name>
            <script>function processHTTP2xxCodes(resp) {

	if (resp.contains(&apos;200&apos;)) {

		var jsonResp = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);

		ctxDstu2 = globalMap.get(&quot;ctxDstu2&quot;);
		var parser = ctxDstu2.newJsonParser();
		var patient = parser.parseResource(Packages.ca.uhn.fhir.model.dstu2.resource.Patient, jsonResp);

		if (patient != null) {
			logger.info(&quot;Resource id: &quot; + patient.getId());
			
			var idSystem = patient.getIdentifierFirstRep().getSystem().replace(&apos;urn:oid:&apos;,&apos;&apos;);
			var idValue = patient.getIdentifierFirstRep().getValue();
			logger.info(&quot;Patient Id: &quot; + idValue + &quot; | &quot; + idSystem);
						
			var names = patient.getName();
			for (var i=0; i &lt; names.size(); i++) {
				var firstName = names.get(i).getFamilyFirstRep();
				var givenName = names.get(i).getGivenFirstRep();
				logger.info(&quot;Patient: &quot; + givenName + &quot;, &quot; + firstName);
			}
					
		}
	} 
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>function processHTTP2xxCodes(resp) {

	if (resp.contains(&apos;200&apos;)) {

		var jsonResp = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);

		ctxDstu2 = globalMap.get(&quot;ctxDstu2&quot;);
		var parser = ctxDstu2.newJsonParser();
		var patient = parser.parseResource(Packages.ca.uhn.fhir.model.dstu2.resource.Patient, jsonResp);

		if (patient != null) {
			logger.info(&quot;Resource id: &quot; + patient.getId());
			
			var idSystem = patient.getIdentifierFirstRep().getSystem().replace(&apos;urn:oid:&apos;,&apos;&apos;);
			var idValue = patient.getIdentifierFirstRep().getValue();
			logger.info(&quot;Patient Id: &quot; + idValue + &quot; | &quot; + idSystem);
						
			var names = patient.getName();
			for (var i=0; i &lt; names.size(); i++) {
				var firstName = names.get(i).getFamilyFirstRep();
				var givenName = names.get(i).getGivenFirstRep();
				logger.info(&quot;Patient: &quot; + givenName + &quot;, &quot; + firstName);
			}
					
		}
	} 
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>HTTP Error Codes</name>
            <script>function processHTTPErrorCodes(resp) {

	logger.info(&quot;Error response: &quot; + resp);

	// Check header&apos;s entries
	for each (seg in msg[&apos;Header&apos;].children()) {
		if (seg.name().toString() == &quot;Field&quot;) {
			logger.info(seg[&apos;Name&apos;].toString() + &quot;:  &quot; + seg[&apos;Value&apos;].toString());
		}
	}

	// Check OperationOutcome resource if present
	var jsonError = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);
	logger.info(&quot;Error code: &quot; + jsonError);

}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>function processHTTPErrorCodes(resp) {

	logger.info(&quot;Error response: &quot; + resp);

	// Check header&apos;s entries
	for each (seg in msg[&apos;Header&apos;].children()) {
		if (seg.name().toString() == &quot;Field&quot;) {
			logger.info(seg[&apos;Name&apos;].toString() + &quot;:  &quot; + seg[&apos;Value&apos;].toString());
		}
	}

	// Check OperationOutcome resource if present
	var jsonError = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);
	logger.info(&quot;Error code: &quot; + jsonError);

}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.0">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.0">
      <metaDataId>1</metaDataId>
      <name>EPIC FHIR</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>5000</retryIntervalMillis>
          <regenerateTemplate>true</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>true</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>${urlDocumentReference}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Accept</string>
            <list>
              <string>application/json+fhir</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>true</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>true</responseIncludeMetadata>
        <responseBinaryMimeTypes>application.*(?&lt;!json|xml)</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>text/plain</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.0">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.0">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Check HTTP status code</name>
            <script>try {

	var resp =  $(&apos;responseStatusLine&apos;);

	if (isHttpCode2xx(resp)) {	
		processHTTP2xxCodes(resp);
		responseStatus = SENT;

	} else {	
		processHTTPErrorCodes(resp);
		responseStatus = ERROR;	
	}
	
} catch(ex) {
	logger.info(&quot;Exception: &quot; + ex);
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>try {

	var resp =  $(&apos;responseStatusLine&apos;);

	if (isHttpCode2xx(resp)) {	
		processHTTP2xxCodes(resp);
		responseStatus = SENT;

	} else {	
		processHTTPErrorCodes(resp);
		responseStatus = ERROR;	
	}
	
} catch(ex) {
	logger.info(&quot;Exception: &quot; + ex);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>HTTP 2xx Codes</name>
            <script>function processHTTP2xxCodes(resp) {

	if (resp.contains(&apos;200&apos;)) {

		var jsonResp = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);

		ctxDstu2 = globalMap.get(&quot;ctxDstu2&quot;);
		var parser = ctxDstu2.newJsonParser();
		var bundle = parser.parseResource(Packages.ca.uhn.fhir.model.dstu2.resource.Bundle, jsonResp);

		if (bundle != null) {

			var entry = bundle.getEntry();
			for (var i=0; i &lt; entry.size(); i++) {
				
				if (&quot;DocumentReference&quot; == entry.get(i).getResource().getResourceName()) {
					var docRef = entry.get(i).getResource();
					var docUrl = docRef.getContentFirstRep().getAttachment().getUrl();
					
					// Route back to the same channel
					router.routeMessageByChannelId(channelId, docUrl);
				}			
			}
									
		}		
	}
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>function processHTTP2xxCodes(resp) {

	if (resp.contains(&apos;200&apos;)) {

		var jsonResp = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);

		ctxDstu2 = globalMap.get(&quot;ctxDstu2&quot;);
		var parser = ctxDstu2.newJsonParser();
		var bundle = parser.parseResource(Packages.ca.uhn.fhir.model.dstu2.resource.Bundle, jsonResp);

		if (bundle != null) {

			var entry = bundle.getEntry();
			for (var i=0; i &lt; entry.size(); i++) {
				
				if (&quot;DocumentReference&quot; == entry.get(i).getResource().getResourceName()) {
					var docRef = entry.get(i).getResource();
					var docUrl = docRef.getContentFirstRep().getAttachment().getUrl();
					
					// Route back to the same channel
					router.routeMessageByChannelId(channelId, docUrl);
				}			
			}
									
		}		
	}
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>HTTP Error Codes</name>
            <script>function processHTTPErrorCodes(resp) {

	logger.info(&quot;Error response: &quot; + resp);

	// Check header&apos;s entries
	for each (seg in msg[&apos;Header&apos;].children()) {
		if (seg.name().toString() == &quot;Field&quot;) {
			logger.info(seg[&apos;Name&apos;].toString() + &quot;:  &quot; + seg[&apos;Value&apos;].toString());
		}
	}

	// Check OperationOutcome resource if present
	var jsonError = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);
	logger.info(&quot;Error code: &quot; + jsonError);

}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>function processHTTPErrorCodes(resp) {

	logger.info(&quot;Error response: &quot; + resp);

	// Check header&apos;s entries
	for each (seg in msg[&apos;Header&apos;].children()) {
		if (seg.name().toString() == &quot;Field&quot;) {
			logger.info(seg[&apos;Name&apos;].toString() + &quot;:  &quot; + seg[&apos;Value&apos;].toString());
		}
	}

	// Check OperationOutcome resource if present
	var jsonError = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);
	logger.info(&quot;Error code: &quot; + jsonError);

}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.0">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.4.0">
      <metaDataId>6</metaDataId>
      <name>EPIC CDA</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>5000</retryIntervalMillis>
          <regenerateTemplate>true</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>true</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>${URL}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Accept</string>
            <list>
              <string>application/xml+fhir</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>true</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>true</responseIncludeMetadata>
        <responseBinaryMimeTypes>application.*(?&lt;!json|xml)</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>text/plain</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.0">
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.4.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.4.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.0">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Check HTTP status code</name>
            <script>try {

	var resp =  $(&apos;responseStatusLine&apos;);
  
	if (isHttpCode2xx(resp)) {	
		processHTTP2xxCodes(resp);
		responseStatus = SENT;

	} else {	
		logger.error(&quot;HTTP error response status: &quot; + resp);
		responseStatus = ERROR;	
	}
	
} catch(ex) {
	logger.info(&quot;Exception: &quot; + ex);
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>try {

	var resp =  $(&apos;responseStatusLine&apos;);
  
	if (isHttpCode2xx(resp)) {	
		processHTTP2xxCodes(resp);
		responseStatus = SENT;

	} else {	
		logger.error(&quot;HTTP error response status: &quot; + resp);
		responseStatus = ERROR;	
	}
	
} catch(ex) {
	logger.info(&quot;Exception: &quot; + ex);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>HTTP 2xx Codes</name>
            <script>function processHTTP2xxCodes(resp) {

	if (resp.contains(&apos;200&apos;)) {

		var strResp = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);

		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		var xmlResp = new XML(strResp);

		var docDecoded = xmlResp[&apos;content&apos;][&apos;@value&apos;].toString();
		var cda = new java.lang.String(FileUtil.decode(docDecoded), &quot;UTF-8&quot;);

		logger.info(&quot;Document: &quot; + cda);

	} 
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>function processHTTP2xxCodes(resp) {

	if (resp.contains(&apos;200&apos;)) {

		var strResp = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);

		default xml namespace = &quot;http://hl7.org/fhir&quot;;
		var xmlResp = new XML(strResp);

		var docDecoded = xmlResp[&apos;content&apos;][&apos;@value&apos;].toString();
		var cda = new java.lang.String(FileUtil.decode(docDecoded), &quot;UTF-8&quot;);

		logger.info(&quot;Document: &quot; + cda);

	} 
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.0">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>false</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>